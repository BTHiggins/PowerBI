{
  "$schema": "https://developer.microsoft.com/json-schemas/fabric/item/report/definition/visualContainer/1.0.0/schema.json",
  "name": "2a1dd5ab1ae63f9d0bbf",
  "position": {
    "x": 23.999999999999996,
    "y": 23.999999999999996,
    "z": 2000,
    "width": 600,
    "height": 383.99999999999994,
    "tabOrder": 2000
  },
  "visual": {
    "visualType": "scriptVisual",
    "query": {
      "queryState": {
        "Values": {
          "projections": [
            {
              "field": {
                "Column": {
                  "Expression": {
                    "SourceRef": {
                      "Entity": "dDate"
                    }
                  },
                  "Property": "Date"
                }
              },
              "queryRef": "dimDate.Date",
              "nativeQueryRef": "Date"
            },
            {
              "field": {
                "Column": {
                  "Expression": {
                    "SourceRef": {
                      "Entity": "fWeather"
                    }
                  },
                  "Property": "Temp (c)"
                }
              },
              "queryRef": "fctWeather.Temp (c)",
              "nativeQueryRef": "Temp (c)"
            }
          ]
        }
      },
      "sortDefinition": {
        "sort": [
          {
            "field": {
              "Column": {
                "Expression": {
                  "SourceRef": {
                    "Entity": "dDate"
                  }
                },
                "Property": "Date"
              }
            },
            "direction": "Ascending"
          }
        ],
        "isDefaultSort": true
      }
    },
    "objects": {
      "script": [
        {
          "properties": {
            "source": {
              "expr": {
                "Literal": {
                  "Value": "'# The following code to create a dataframe and remove duplicated rows is always executed and acts as a preamble for your script: \n\n# dataset <- data.frame(Date, Temp (c))\n# dataset <- unique(dataset)\n\n# Paste or type your script code here:\nlibrary(tidyverse)\n\n# Sort out the date format\ndataset <- dataset %>%\n  mutate(Date = as.Date(Date))\n\n# Groupby to get min, max, avg\ndataset_grp <- dataset %>%\n  group_by(Date) %>%\n  summarise(\n    min = min(`Temp (c)`),\n    max = max(`Temp (c)`),\n    avg = mean(`Temp (c)`)\n  )\n\n# Rejoin calculations\ndataset <- dataset %>%\n  left_join(dataset_grp, by = \"Date\")\n\n# Plotting the chart\nggplot(dataset) +\n  geom_segment(\n    aes(x = Date, xend = Date, y = min, yend = max),\n    color=\"grey\"\n  ) +\n  geom_point(\n    aes(x = Date, y = `Temp (c)`, color = \"Observations\"),\n    size = 3\n  ) +\n  geom_point(\n    aes(x = Date, y = min, label = min, color = \"Min\"),\n    size = 3\n  ) +\n  geom_point(\n    aes(x = Date, y = max, label = max, color = \"Max\"),\n    size = 3\n  ) +\n  geom_point(\n    aes(x = Date, y = avg, label = avg, color = \"Average\"),\n    size = 3\n  ) +\n  xlab(\"Date, 2024\") +\n  ylab(\"Temperature (c)\") +\n  scale_color_manual(\n    values = c(\"grey\", \"blue\", \"red\", \"orange\"),\n    breaks = c(\"Observations\", \"Min\", \"Max\", \"Average\")\n  ) +\n  theme(legend.position = \"top\") +\n  guides (color = guide_legend(title = NULL))\n\n  '"
                }
              }
            },
            "provider": {
              "expr": {
                "Literal": {
                  "Value": "'R'"
                }
              }
            }
          }
        }
      ]
    },
    "drillFilterOtherVisuals": true
  }
}